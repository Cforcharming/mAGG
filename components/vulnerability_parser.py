#!/usr/bin/env python
"""Module responsible for generating vulnerabilities from docker containers."""

import os
import subprocess

from components import topology_parser
from components import writer
from components import reader
from pathlib import Path


def parse_vulnerabilities(folder):
    """Function that gets the vulnerabilities for each docker container."""
    
    print("Executing the vulnerability parser...")
    
    list_services = topology_parser.get_services(folder)
    mapping_image_names = topology_parser.get_mapping_service_to_image_names(list_services, folder)
    
    old_root_path = os.getcwd()
    
    if not os.path.exists(os.path.join(old_root_path, "examples-results")):
        os.makedirs(os.path.join(old_root_path, "examples-results"))
    
    if not os.path.exists(os.path.join(old_root_path, "examples-results", folder)):
        os.makedirs(os.path.join(old_root_path, "examples-results", folder))
    
    os.chdir(os.path.join(os.getcwd(), folder))
    
    # Build the images that are specified in docker-compose.yml
    subprocess.call(["docker", "compose", "build"])
    
    # Start clair, clairctl and postgres
    clairctl_home = os.path.join(str(Path.home()), "go", "src", "github.com", "jgsqware", "clairctl")
    
    os.chdir(clairctl_home)
    
    # Doing the analysis and make reports files.
    parsed_images = reader.cache_parsed_images(old_root_path, folder)
    
    for service in list_services:
        
        image = mapping_image_names[service]
        
        if not parsed_images.get(image, False):
            parse_unknown_images(clairctl_home, image, old_root_path, folder)
            parsed_images[image] = True
        
    os.chdir(old_root_path)
    
    print("Vulnerability parser executed.")


def parse_unknown_images(clairctl_home, image, old_root_path, folder):
    
    print("Making report for the image " + image)
    subprocess.call(["docker",
                     "compose",
                     "exec",
                     "--user",
                     "root",
                     "clairctl",
                     "clairctl",
                     "--no-clean",
                     "report",
                     "--local",
                     "--format",
                     "json",
                     image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    
    writer.copy_vulnerability_file(clairctl_home, image, old_root_path, folder)
