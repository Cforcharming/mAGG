"""Module responsible for generating vulnerabilities from docker containers."""

import os
import json
import time
import errno
import subprocess
from pathlib import Path

from mio import reader, writer

if go_path := os.getenv('GOPATH') is None:
    go_path = os.path.join(str(Path.home()), 'go')

clairctl_home = os.path.join(go_path, 'src/github.com/jgsqware/clairctl')

if not os.path.exists(clairctl_home):
    raise EnvironmentError('Go environment not detected, or clairctl environment not exists in:\n' + clairctl_home)


def parse_vulnerabilities(example_folder: str, services: dict[str, dict[str, ]]) \
        -> (int, dict[str, dict[str, ]], set[str], int):
    """Function that gets the vulnerabilities for each docker container."""

    parsed_images = reader.cache_parsed_images(example_folder)
    vulnerabilities = dict()
    
    print("Executing the vulnerability parser...")

    time_start = time.time()
    
    for service in services:
        
        image = services[service]['image']
        
        if vulnerabilities.get(image) is None:
            vulnerability_json = get_single_vulnerability(parsed_images, example_folder, image)
            vulnerabilities[image] = vulnerability_json
    
    duration_vulnerabilities = time.time() - time_start
    print("Vulnerability parser executed.")
    print("Time elapsed: " + str(duration_vulnerabilities) + " seconds.\n")
    stat = 0
    if not vulnerabilities.keys():
        print("Found 0 vulnerabilities. Terminating the function...")
        stat = errno.ENOENT
    
    return stat, vulnerabilities, parsed_images, duration_vulnerabilities


def get_single_vulnerability(parsed_images, example_folder, image):
    parse_single_image(parsed_images, image, example_folder)
    vulnerability_path = os.path.join(example_folder, image + "-vulnerabilities.json")
    with open(vulnerability_path) as vul_file:
        vulnerability_json = json.load(vul_file)
    return vulnerability_json


def parse_single_image(parsed_images: set[str], image, example_folder):
    if image not in parsed_images:
        print("Making report for the image " + image)
        
        if not os.path.exists(
                os.path.join(clairctl_home, "docker-compose-data", "clairctl-reports", "json", "analysis-" +
                                                                                               image + "-latest.json")):
            
            old_root_path = os.getcwd()
            os.chdir(clairctl_home)
            subprocess.call(
                ["docker", "compose", "exec", "--user", "root", "clairctl", "clairctl", "--no-clean", "report",
                 "--local", "--format", "json", image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            os.chdir(old_root_path)
            
        writer.copy_vulnerability_file(clairctl_home, image, example_folder)
        parsed_images.add(image)


def add(vulnerabilities, parsed_images, example_folder, image):
    
    if vulnerabilities.get(image) is None:
        vulnerabilities[image] = get_single_vulnerability(parsed_images, example_folder, image)
