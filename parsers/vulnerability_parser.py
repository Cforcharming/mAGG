#!/usr/bin/env python
"""Module responsible for generating vulnerabilities from docker containers."""

import os
import json
import subprocess
from pathlib import Path

from mio import writer


clairctl_home = os.path.join(str(Path.home()), "go", "src", "github.com", "jgsqware", "clairctl")


def parse_vulnerabilities(example_folder, parsed_images, services, mapping_names):
    """Function that gets the vulnerabilities for each docker container."""
    
    print("Executing the vulnerability parser...")
    
    old_root_path = os.getcwd()
    os.chdir(example_folder)
    
    # Build the images that are specified in docker-compose.yml
    # subprocess.call(["docker", "compose", "up"])
    
    os.chdir(clairctl_home)
    
    # Doing the analysis and make reports files.
    
    vulnerabilities = {}
    
    for service in services:
        image = mapping_names[service]
        parse_single_image(parsed_images, image, example_folder)
        
        if vulnerabilities.get(image) is None:
            vulnerability_json = get_single_vulnerability(example_folder, image)
            vulnerabilities[image] = vulnerability_json
    
    os.chdir(old_root_path)
    
    print("Vulnerability parser executed.")
    return vulnerabilities


def get_single_vulnerability(example_folder, image):
    vulnerability_path = os.path.join(example_folder, image + "-vulnerabilities.json")
    with open(vulnerability_path) as vul_file:
        vulnerability_json = json.load(vul_file)
    return vulnerability_json


def parse_single_image(parsed_images, image, example_folder):
    if not parsed_images.get(image, False):
        parse_unknown_images(image, example_folder)
        parsed_images[image] = True


def parse_unknown_images(image, example_folder):
    print("Making report for the image " + image)
    
    if not os.path.exists(os.path.join(clairctl_home, "docker-compose-data", "clairctl-reports", "json", "analysis-" +
                                       image + "-latest.json")):
        subprocess.call(["docker", "compose", "exec", "--user", "root", "clairctl", "clairctl", "--no-clean", "report",
                         "--local", "--format", "json", image], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    
    writer.copy_vulnerability_file(clairctl_home, image, example_folder)


def add(vulnerabilities, parsed_images, example_folder, image):
    
    parse_single_image(parsed_images, image, example_folder)
    
    if vulnerabilities.get(image) is None:
        vulnerabilities[image] = get_single_vulnerability(example_folder, image)
